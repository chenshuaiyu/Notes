package BinaryTree;

/**
 *  二叉树
 *
 *  满二叉树：所有终端结点均位于同一层次，且其他非终端结点的度数均为 2
 *  完全二叉树：扣除其最大层次那层后即成为一颗满二叉树，且层次最大那层的所有结点均向左靠齐
 *  满二叉树一定是完全二叉树，但完全二叉树不一定是满二叉树。
 *
 * 性质 1 ：一颗非空二叉树的第 i 层上至多有 2^(n-1) 个结点（i≥1）
 * 性质 2 ：深度为 h 的二叉树至多有 2^h-1 个结点（h≥1）
 * 性质 3 ：对于任何一颗二叉树 T ，如果其终端结点数为n0，度为 2 的结点数为n2，则 n0 = n2 + 1
 *      n:结点总数   n0:终端结点数    n1:度为 1 的结点数    n2:度为 2 的结点数
 *      n = n0 + n1 + n2
 *      n = n1 + 2 * n2 + 1  （树枝角度）
 *      n0 + n1 + n2 = n1 + 2 * n2 + 1
 * 性质 4 ：对于具有 n 个结点的完全二叉树，如果按照从上到下、同一层次上的结点按从左到右的顺序对二叉树中的所有结点从 1 开始顺序编号，
 * 则对于序号为 i 的结点，有：
 * 1. 如果 i > 1 ，则序号为 i 的结点其双亲结点的序号为（不大于 i/2 的最大整数）；如果 i = 1 ，则结点 i 为根节点，没有双亲。
 * 2. 如果 2 * i > n ，则结点 i 无左子女（此时结点 i 为终端结点）；否则其左子女为结点 2 * i。
 * 3. 如果 2 * i + 1 > n ，则结点 i 无右子女；否则右左子女为结点 2 * i + 1。
 *
 */
public class BinaryTree {
    int val;
    BinaryTree left;
    BinaryTree right;

    public BinaryTree(int val) {
        this.val = val;
    }
}
